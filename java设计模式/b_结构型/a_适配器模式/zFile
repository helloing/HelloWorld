
适配器模式:
是作为两个不兼容的接口之间的桥梁。

将一个类的接口转接成用户所期待的。一个适配使得因接口不兼容而不能
在一起工作的类工作在一起，做法是将类别自己的接口包裹在一个已存在的类中。


举个真实的例子:
读卡器是作为内存卡和笔记本之间的适配器。
您将内存卡插入读卡器，再将读卡器插入笔记本，
这样就可以通过笔记本来读取内存卡。

优点：
1、可以让任何两个没有关联的类一起运行。
2、提高了类的复用。
3、增加了类的透明度。
4、灵活性好。

缺点：
1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。
比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，
一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，
可以不使用适配器，而是直接对系统进行重构。
2、由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，
而且目标类必须是抽象类。

实例：
 一个MacBook笔记本只支持三插头的。但是我们的墙角只有一个两插头的插座，
 所以需要一个转换头（适配器），将两插头变为三插头，好让我们笔记本使用




